# Default app configuration
org.broadinstitute.transporter {

  web {
    host: "0.0.0.0"
    port: 8080

    google-oauth.client-id: ${?OAUTH_CLIENT_ID}
  }

  db {
    # Default to a local DB, but allow for overrides
    host: localhost
    host: ${?DB_HOST}
    db-name: postgres
    db-name: ${?DB_NAME}

    username: ${?DB_USERNAME}
    password: ${?DB_PASSWORD}

    timeouts {
      connection-timeout: 60s
      connection-timeout: ${?DB_CONNECTION_TIMEOUT}
      max-connection-lifetime: 30s
      max-connection-lifetime: ${?DB_MAX_CONNECTION_LIFETIME}
      connection-validation-timeout: 1s
      connection-validation-timeout: ${?DB_CONNECTION_VALIDATION_TIMEOUT}
      leak-detection-threshold: 10s
      leak-detection-threshold: ${?DB_LEAK_DETECTION_THRESHOLD}
    }
  }

  kafka {
    connection {
      bootstrap-servers: ["localhost:9092"]
      bootstrap-servers: [${?KAFKA_BOOTSTRAP_URL}]
      client-id: "transporter-manager"
      request-timeout: 30s
      close-timeout: 1s

      # Optional settings for Kafka TLS.
      tls.truststore-path: ${?KAFKA_CLUSTER_TRUSTSTORE_PATH}
      tls.truststore-password: ${?KAFKA_CLUSTER_TRUSTSTORE_PASSWORD}

      # Optional settings for Kafka auth.
      scram.hash-algorithm: ${?KAFKA_SCRAM_ALGORITHM}
      scram.username: ${?KAFKA_SCRAM_USERNAME}
      scram.password: ${?KAFKA_SCRAM_PASSWORD}
    }

    consumer {
      # MUST be the same across all instances of the manager, to avoid double-processing.
      group-id: "transporter-manager"
      group-id: ${?KAFKA_GROUP_ID}

      max-records-per-batch: 100
      wait-time-per-batch: 1s

      max-message-size-mib: ${?KAFKA_MAX_MESSAGE_SIZE_MIB}
    }

    topics {
      request-topic: ${?KAFKA_REQUEST_TOPIC}
      progress-topic: ${?KAFKA_PROGRESS_TOPIC}
      result-topic: ${?KAFKA_RESULT_TOPIC}
    }
  }

  transfer {
    submission-interval: 3s
    submission-interval: ${?TRANSFER_SUBMISSION_INTERVAL}
    max-in-flight: 10
    max-in-flight: ${?MAX_CONCURRENT_TRANSFERS}

    # Replace in application.conf to match the expected schema of the agent in use.
    schema: { "type": "object" }
  }
}
